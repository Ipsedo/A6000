Devoir de compilation - Acte I.
Auteur : Samuel BERRIEN

Parties ayant été faites et fonctionnelles :

- TP 1 - Représentations intermédiaires et génération de code assembleur MIPS

- TP 2 - Analyse lexicale, analyse syntaxique
  + extensions : - Sucre syntaxique pour la boucle for.
                  Ainsi que d'autres éléments tel l'in/decrémentation ++/--,
                  la mise à jour d'une variable via l'affectation OP=
                    (+=, -=, /=, *=).
                  Le simple branchement if sans else.
                  Divers operateurs manquants ( /, >, >= ...).
                 - Aider son prochain : messages d'erreur :
                  Message d'erreur pour caractère non reconnu,
                  lexème non attendu et erreur de typage
                  (les erreur de lexèmes ne sont pas gérées par les outils
                  d'erreurs de menhir).
                 - Macros constantes (la valeur du macro est à mettre sur
                  une seule ligne).

- TP 3 - Analyse de flot de données et optimisations
  + extensions : - Calcul de point fixe avec liste de tâches, on parcourt le
                  code en "zig-zag" de bas en haut (comme vu en TD) ce qui
                  permet d'économiser un grand nombre d'itérations.

- TP 4 - Allocation de registres par coloration de graphe (Allocation de
  registres, pour de vrai)
  + extensions : - Réutilisation d'identifiants inter-instructions.
                 - Réutilisation d'identifiants intra-expressions.

L'extension "Économiser les mouvements" du TP4 n'a pas été traitée du fait que
l'extension du TP3 nécéssaire à sa réalisation ne l'est pas non plus.
Cependant pour un soucis de perfectionnement elle finira par être traitée par
simple curiosité.

Les erreurs de lexème ne retournent pas la colonne courante mais le lexème
courant d'une ligne pour une raison qui n'a pas encore été trouvée.
