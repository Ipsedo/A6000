# 1 "src/SourceLexer.mll"
 

open Lexing
open SourceParser

exception UnknowChar of string
exception UnknowToken of string

let id_or_keyword =
  let h = Hashtbl.create 17 in
  List.iter (fun (s, k) -> Hashtbl.add h s k)
    [	"integer",  INT;
      "print",    PRINT;
      "main",     MAIN;
      "var",      VAR;
      "boolean",  BOOL;
      "true",     LITBOOL(true);
      "false",    LITBOOL(false);
      "while",    WHILE;
      "if",       IF;
      "then",     THEN;
      "else",     ELSE;
      "for",      FOR
    ] ;
  fun s ->
    try  Hashtbl.find h s
    with Not_found -> IDENT(s)



# 33 "src/SourceLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\228\255\229\255\002\000\003\000\001\000\001\000\004\000\
    \005\000\006\000\007\000\024\000\009\000\028\000\249\255\250\255\
    \251\255\024\000\084\000\254\255\002\000\233\255\236\255\231\255\
    \232\255\235\255\245\255\244\255\242\255\240\255\239\255\238\255\
    \237\255\230\255\004\000\252\255\253\255\041\000\041\000\255\255\
    \254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\021\000\027\000\027\000\027\000\014\000\
    \012\000\027\000\027\000\009\000\008\000\007\000\255\255\255\255\
    \255\255\003\000\002\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\002\000\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\036\000\000\000\000\000\255\255\255\255\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\019\000\020\000\000\000\020\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\009\000\020\000\000\000\000\000\000\000\006\000\030\000\
    \016\000\015\000\012\000\013\000\038\000\011\000\037\000\003\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\004\000\014\000\008\000\010\000\007\000\033\000\
    \032\000\029\000\028\000\027\000\026\000\025\000\023\000\022\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\040\000\039\000\000\000\024\000\000\000\000\000\
    \000\000\021\000\000\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\005\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
    \000\000\000\000\000\000\018\000\000\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\255\255\000\000\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\255\255\255\255\255\255\000\000\006\000\
    \000\000\000\000\000\000\000\000\034\000\000\000\034\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \004\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\037\000\038\000\255\255\011\000\255\255\255\255\
    \255\255\013\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\018\000\000\000\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\255\255\255\255\018\000\255\255\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "src/SourceLexer.mll"
              ( token lexbuf )
# 165 "src/SourceLexer.ml"

  | 1 ->
# 40 "src/SourceLexer.mll"
              ( new_line lexbuf; token lexbuf )
# 170 "src/SourceLexer.ml"

  | 2 ->
# 42 "src/SourceLexer.mll"
              ( id_or_keyword (lexeme lexbuf) )
# 175 "src/SourceLexer.ml"

  | 3 ->
# 44 "src/SourceLexer.mll"
              ( LITINT (int_of_string (lexeme lexbuf)))
# 180 "src/SourceLexer.ml"

  | 4 ->
# 46 "src/SourceLexer.mll"
              ( BEGIN )
# 185 "src/SourceLexer.ml"

  | 5 ->
# 48 "src/SourceLexer.mll"
              ( END )
# 190 "src/SourceLexer.ml"

  | 6 ->
# 50 "src/SourceLexer.mll"
              ( SEMI )
# 195 "src/SourceLexer.ml"

  | 7 ->
# 52 "src/SourceLexer.mll"
              ( PLUS )
# 200 "src/SourceLexer.ml"

  | 8 ->
# 54 "src/SourceLexer.mll"
              ( MULT )
# 205 "src/SourceLexer.ml"

  | 9 ->
# 56 "src/SourceLexer.mll"
              ( SUB )
# 210 "src/SourceLexer.ml"

  | 10 ->
# 58 "src/SourceLexer.mll"
              ( EQ )
# 215 "src/SourceLexer.ml"

  | 11 ->
# 60 "src/SourceLexer.mll"
              ( NEQ )
# 220 "src/SourceLexer.ml"

  | 12 ->
# 62 "src/SourceLexer.mll"
              ( LT )
# 225 "src/SourceLexer.ml"

  | 13 ->
# 64 "src/SourceLexer.mll"
              ( LE )
# 230 "src/SourceLexer.ml"

  | 14 ->
# 66 "src/SourceLexer.mll"
              ( MT )
# 235 "src/SourceLexer.ml"

  | 15 ->
# 68 "src/SourceLexer.mll"
              ( ME )
# 240 "src/SourceLexer.ml"

  | 16 ->
# 70 "src/SourceLexer.mll"
              ( AND )
# 245 "src/SourceLexer.ml"

  | 17 ->
# 72 "src/SourceLexer.mll"
              ( OR )
# 250 "src/SourceLexer.ml"

  | 18 ->
# 74 "src/SourceLexer.mll"
              ( SET )
# 255 "src/SourceLexer.ml"

  | 19 ->
# 76 "src/SourceLexer.mll"
              ( INCR )
# 260 "src/SourceLexer.ml"

  | 20 ->
# 78 "src/SourceLexer.mll"
              ( DECR )
# 265 "src/SourceLexer.ml"

  | 21 ->
# 80 "src/SourceLexer.mll"
              ( DIV )
# 270 "src/SourceLexer.ml"

  | 22 ->
# 82 "src/SourceLexer.mll"
              ( ADDSET )
# 275 "src/SourceLexer.ml"

  | 23 ->
# 84 "src/SourceLexer.mll"
              ( SUBSET )
# 280 "src/SourceLexer.ml"

  | 24 ->
# 86 "src/SourceLexer.mll"
              ( MULTSET )
# 285 "src/SourceLexer.ml"

  | 25 ->
# 88 "src/SourceLexer.mll"
              ( DIVSET )
# 290 "src/SourceLexer.ml"

  | 26 ->
# 90 "src/SourceLexer.mll"
              ( EOF )
# 295 "src/SourceLexer.ml"

  | 27 ->
# 92 "src/SourceLexer.mll"
              (
                let start_p = lexeme_start_p lexbuf in
                raise (UnknowChar ("Unknow char(s) \""
                      ^ (lexeme lexbuf)
                      ^ "\" in "
                      ^ start_p.pos_fname
                      ^ " at line "
                      ^ (string_of_int start_p.pos_lnum)
                      ^ ", col "
                      ^ (string_of_int (start_p.pos_cnum - start_p.pos_bol)))))
# 309 "src/SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 34
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 105 "src/SourceLexer.mll"
                ( comment lexbuf; comment lexbuf )
# 321 "src/SourceLexer.ml"

  | 1 ->
# 107 "src/SourceLexer.mll"
                ( () )
# 326 "src/SourceLexer.ml"

  | 2 ->
# 109 "src/SourceLexer.mll"
                ( comment lexbuf )
# 331 "src/SourceLexer.ml"

  | 3 ->
# 111 "src/SourceLexer.mll"
                ( failwith "Unterminated comment" )
# 336 "src/SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

